!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLUE	mycommon.h	/^#define BLUE /;"	d
BOLD	mycommon.h	/^#define BOLD /;"	d
BinSTreeNode	mycommon.h	/^} BinSTreeNode;$/;"	t	typeref:struct:_BinSTreeNode
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -O0 -g$/;"	m
CHECK	mycommon.h	/^#define CHECK /;"	d
COUNT	mycommon.h	/^#define COUNT /;"	d
CYAN	mycommon.h	/^#define CYAN /;"	d
DEBUG_PRINT	mycommon.h	/^#define DEBUG_PRINT /;"	d
DEFAULT	mycommon.h	/^#define DEFAULT /;"	d
FONT_DEFAULT	mycommon.h	/^#define FONT_DEFAULT /;"	d
GRAPH_PRINT	mycommon.h	/^#define GRAPH_PRINT /;"	d
GREEN	mycommon.h	/^#define GREEN /;"	d
INORDER	mycommon.h	/^#define INORDER /;"	d
LDFLAGS	Makefile	/^LDFLAGS = -lm$/;"	m
MAGENTA	mycommon.h	/^#define MAGENTA /;"	d
OBJS	Makefile	/^OBJS  = visualizeGraph.o myArgs.o myfree.o sortTree.o removeNode.o substString.o isChild.o isLeft.o getNodeNum.o checkSorted.o clearBinSTree.o doNode.o searchNode.o traverseTree.o printTree.o deleteNode.o setNode.o addNode.o createNode.o mystrcmp.o mystrcpy.o mystrlen.o mystrncmp.o mystrsubst.o$/;"	m
OBJST	Makefile	/^OBJST = visualizeGraph.o myArgs.o myfree.o sortTree.o removeNode.o substString.o isChild.o isLeft.o getNodeNum.o checkSorted.o clearBinSTree.o doNode.o searchNode.o traverseTree.o printTree.o deleteNode.o setNode.o addNode.o createNode.o mystrcmp.o mystrcpy.o mystrlen.o mystrncmp.o mystrsubst.o test.o$/;"	m
POSTORDER	mycommon.h	/^#define POSTORDER /;"	d
PREORDER	mycommon.h	/^#define PREORDER /;"	d
PRINT	mycommon.h	/^#define PRINT /;"	d
PROG	Makefile	/^PROG = pjt$/;"	m
RED	mycommon.h	/^#define RED /;"	d
REMOVE	mycommon.h	/^#define REMOVE /;"	d
REMOVE_MATCH	mycommon.h	/^#define REMOVE_MATCH /;"	d
SIZE	test.c	/^#define SIZE /;"	d	file:
SIZE	test0.c	/^#define SIZE /;"	d	file:
SORT	mycommon.h	/^#define SORT /;"	d
SUBST	mycommon.h	/^#define SUBST /;"	d
TEST	Makefile	/^TEST = test$/;"	m
UNDER_LINE	mycommon.h	/^#define UNDER_LINE /;"	d
YELLOW	mycommon.h	/^#define YELLOW /;"	d
_BinSTreeNode	mycommon.h	/^typedef struct _BinSTreeNode {$/;"	s
__mycommon__	mycommon.h	/^#define __mycommon__$/;"	d
_myArgs	mycommon.h	/^typedef struct _myArgs {$/;"	s
action	mycommon.h	/^  int action;$/;"	m	struct:_myArgs
addNode	addNode.c	/^void addNode(BinSTreeNode *rootNode, BinSTreeNode *node) {$/;"	f
checkPrint	printTree.c	/^void checkPrint(BinSTreeNode* root) {$/;"	f
checkSorted	checkSorted.c	/^int checkSorted(BinSTreeNode* root) {$/;"	f
checkSortedWithArgs	checkSorted.c	/^int checkSortedWithArgs(BinSTreeNode* root, myArgs* args) {$/;"	f
clearBinSTree	clearBinSTree.c	/^void clearBinSTree(BinSTreeNode* rootNode) {$/;"	f
count	mycommon.h	/^  int count;$/;"	m	struct:_myArgs
createNode	createNode.c	/^BinSTreeNode* createNode(const char *word) {$/;"	f
create_myArgs_forCheck	myArgs.c	/^myArgs* create_myArgs_forCheck(BinSTreeNode* root) {$/;"	f
debug_printTree	printTree.c	/^void debug_printTree(BinSTreeNode *rootNode, int order) {$/;"	f
delall	mycommon.h	/^  int delall;$/;"	m	struct:_myArgs
deleteNode	deleteNode.c	/^void deleteNode(BinSTreeNode* node) {$/;"	f
doNode	doNode.c	/^void doNode(BinSTreeNode* node, myArgs *args) {$/;"	f
false	mycommon.h	/^#define false /;"	d
fp	mycommon.h	/^  FILE* fp;$/;"	m	struct:_myArgs
free_myArgs	myfree.c	/^void free_myArgs(myArgs* args) {$/;"	f
free_unsortedNodes	myfree.c	/^void free_unsortedNodes(myArgs* args) {$/;"	f
getMaxNode	searchNode.c	/^BinSTreeNode* getMaxNode(BinSTreeNode* root) {$/;"	f
getMinNode	searchNode.c	/^BinSTreeNode* getMinNode(BinSTreeNode* root) {$/;"	f
getNodeNum	getNodeNum.c	/^int getNodeNum(BinSTreeNode* root) {$/;"	f
inorder	traverseTree.c	/^BinSTreeNode* inorder(BinSTreeNode* node, myArgs* args) {$/;"	f
isLeft	isLeft.c	/^int isLeft(BinSTreeNode *r, BinSTreeNode *n) {$/;"	f
isLeftChild	isChild.c	/^int isLeftChild(BinSTreeNode *p, BinSTreeNode *n) {$/;"	f
isRightChild	isChild.c	/^int isRightChild(BinSTreeNode *p, BinSTreeNode *n) {$/;"	f
left	mycommon.h	/^  struct _BinSTreeNode* left;$/;"	m	struct:_BinSTreeNode	typeref:struct:_BinSTreeNode::_BinSTreeNode
main	test-strncmp.c	/^int main(int argc, char* argv[])$/;"	f
main	test-subst.c	/^int main(int argc, char** argv)$/;"	f
main	test.c	/^int main(int argc, char** argv)$/;"	f
main	test0.c	/^int main(int argc, char** argv)$/;"	f
main2	test-subst.c	/^int main2(int argc, char* argv[])$/;"	f
main2	test.c	/^int main2(int argc, char* argv[])$/;"	f
main2	test0.c	/^int main2(int argc, char* argv[])$/;"	f
min	mystrcmp.c	/^int min(int a, int b) {$/;"	f
myArgs	mycommon.h	/^} myArgs;$/;"	t	typeref:struct:_myArgs
mystrcmp	mystrcmp.c	/^int mystrcmp(const char* s1, const char* s2) {$/;"	f
mystrcpy	mystrcpy.c	/^char* mystrcpy(char* d, const char* s) {$/;"	f
mystrlen	mystrlen.c	/^int mystrlen(const char* s) {$/;"	f
mystrncmp	mystrncmp.c	/^int mystrncmp(const char *s1, const char *s2, int n) {$/;"	f
mystrsubst	mystrsubst.c	/^char* mystrsubst(const char* word, const char* s1, const char* s2) {$/;"	f
num_removed	mycommon.h	/^  int num_removed;$/;"	m	struct:_myArgs
parent	mycommon.h	/^  struct _BinSTreeNode* parent;$/;"	m	struct:_BinSTreeNode	typeref:struct:_BinSTreeNode::_BinSTreeNode
postorder	traverseTree.c	/^BinSTreeNode* postorder(BinSTreeNode* node, myArgs* args) {$/;"	f
preorder	traverseTree.c	/^BinSTreeNode* preorder(BinSTreeNode* node, myArgs* args) {$/;"	f
printTree	printTree.c	/^void printTree(BinSTreeNode *rootNode, int order) {$/;"	f
print_test	test.c	/^void print_test(BinSTreeNode* r, char* ans1, char* ans2, char* ans3) {$/;"	f
removeNode	removeNode.c	/^void removeNode(BinSTreeNode* root, const char* word, int delall) {$/;"	f
remove_test	test.c	/^void remove_test(BinSTreeNode* r) {$/;"	f
result	mycommon.h	/^  int result;$/;"	m	struct:_myArgs
right	mycommon.h	/^  struct _BinSTreeNode* right;$/;"	m	struct:_BinSTreeNode	typeref:struct:_BinSTreeNode::_BinSTreeNode
rstr	mycommon.h	/^  const char* rstr;$/;"	m	struct:_myArgs
setNodeAsLeft	setNode.c	/^void setNodeAsLeft(BinSTreeNode *node, BinSTreeNode *left) {$/;"	f
setNodeAsOrphan	setNode.c	/^void setNodeAsOrphan(BinSTreeNode *node) {$/;"	f
setNodeAsRight	setNode.c	/^void setNodeAsRight(BinSTreeNode *node, BinSTreeNode *right) {$/;"	f
sortBinSTree	sortTree.c	/^void sortBinSTree(BinSTreeNode* rootNode) {$/;"	f
str	mycommon.h	/^  char* str;$/;"	m	struct:_BinSTreeNode
str	mycommon.h	/^  const char* str;$/;"	m	struct:_myArgs
substString	substString.c	/^int substString(BinSTreeNode *root, const char* str, const char* rstr) {$/;"	f
subst_test	test.c	/^void subst_test(BinSTreeNode* r) {$/;"	f
true	mycommon.h	/^#define true /;"	d
unlinkParent	setNode.c	/^void unlinkParent(BinSTreeNode *node) {$/;"	f
unsort_len	mycommon.h	/^  int unsort_len;$/;"	m	struct:_myArgs
unsortedNodes	mycommon.h	/^  BinSTreeNode** unsortedNodes;$/;"	m	struct:_myArgs
visualizeGraph	visualizeGraph.c	/^int visualizeGraph(BinSTreeNode* root, const char* file) {$/;"	f
